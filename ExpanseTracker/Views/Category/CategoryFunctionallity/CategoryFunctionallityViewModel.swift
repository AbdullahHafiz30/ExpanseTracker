//
//  AddCategoryViewModel.swift
//  ExpanseTracker
//
//  Created by Rayaheen Mseri on 18/10/1446 AH.
//

import SwiftUI
import CoreData
import Combine

class CategoryFunctionallityViewModel: ObservableObject {
    private let context = PersistanceController.shared.context
    @AppStorage("AppleLanguages") var currentLanguage: String = Locale.current.language.languageCode?.identifier ?? "en"
    /// Saves a new category to Core Data and associates it with a specific user.
    ///
    /// This method creates a new `CategoryEntity` using the details provided in the `Category` model,
    /// then links it to the corresponding `UserEntity` based on the given `userId`.
    /// The category is added to the user's list of categories using the Core Data relationship.
    ///
    /// - Parameters:
    ///   - category: A `Category` model instance containing the data to be saved.
    ///   - userId: The unique identifier of the user to whom the category should be associated.
    func saveCategoryToCoreData(category: Category, userId: String) {
        print("save category to core data")
        
        // Create a fetch request to find the user by id
        let userRequest: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()
        // Filter the results
        userRequest.predicate = NSPredicate(format: "id == %@", userId)
        userRequest.fetchLimit = 1
        
        do{
            // Fetch the first user that matches the predicate
            if let existingUserEntity = try context.fetch(userRequest).first {
                
                // Create a new CategoryEntity instance in the context
                let newCategory = CategoryEntity(context: context)
                newCategory.id = category.id
                newCategory.name = category.name
                newCategory.color = category.color
                newCategory.icon = category.icon
                newCategory.categoryType = category.categoryType?.rawValue
                newCategory.budgetLimit = category.budgetLimit ?? 0.0
                
                // Add the new category to the user list of categories
                // addToCategory is a method automatically generated by Core Data for the one-to-many relationship between UserEntity and CategoryEntity
                existingUserEntity.addToCategory(newCategory)
                print("✅ Added new category for the user.")
                
                PersistanceController.shared.saveContext()
            }
            else {
                print("No user found with id: \(userId)")
            }
        }catch {
            print("❌ Failed to save context: \(error)")
        }
    }
    
    /// Checks if a category with the same name or color already exists for a user,
    /// and validates the total budget limit.
    ///
    /// This method loops through all existing categories for the given user and checks:
    /// - If there's another category with the same name.
    /// - If there's another category with the same color.
    /// - If the new category's budget is zero.
    /// - If the total budget (including the new one) exceeds the user's allowed budget.
    ///
    /// - Parameters:
    ///   - category: The `Category` object being checked.
    ///   - userId: The ID of the user who owns the categories.
    ///   - userBudget: The total budget limit allowed for the user.
    /// - Returns: A tuple `(Bool, String)`:
    ///   - `true` and a message if a conflict or validation error occurs.
    ///   - `false` and empty string if all checks pass.
    func checkCategoryExist(category: Category, userId: String, userBudget: Double) -> (Bool , String) {
        print("Check if category exist")
        // Create a fetch request to find the user by id
        let userRequest: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()
        // Filter the results
        userRequest.predicate = NSPredicate(format: "id == %@", userId)
        userRequest.fetchLimit = 1
        do{
            // Fetch the first user that matches the predicate
            if let existingUserEntity = try context.fetch(userRequest).first {
                
                let existingCategories = existingUserEntity.category?.allObjects as? [CategoryEntity] ?? []
                
                var budgetLimit = Int(category.budgetLimit ?? 0)
                
                for existingCategory in existingCategories {
                    
                    // Skip the check if editing the same category
                    if let existingCategoryId = existingCategory.id, existingCategoryId == category.id {
                        continue
                    }
                    
                    budgetLimit += Int(existingCategory.budgetLimit)
                    print("========= \(budgetLimit)")
                    
                    if existingCategory.name == category.name {
                        print("Category already exist")
                        return (true, "CategoryExist".localized(using: currentLanguage))
                    }
                    
                    if existingCategory.color == category.color {
                        print("Color already exist")
                        return (true, "ColorExist".localized(using: currentLanguage))
                    }
                    
                    if category.budgetLimit == 0.0 {
                        print("Budget limit cannot be zero")
                        return (true, "BudgetLimitZero".localized(using: currentLanguage))
                    }
                }
                
                if budgetLimit > Int(userBudget) {
                    print("You have exceeded your budget limit")
                    return (true, "ExceededBudgetLimit".localized(using: currentLanguage))
                }
                return (false, "")
            }
            else {
                print("No user found with id: \(userId)")
            }
        }catch {
            print("❌ Failed to save context: \(error)")
        }
        return (false, "")
    }
    
    /// Fetches a specific category from Core Data using its ID and the user's ID.
    ///
    /// This method performs the following:
    /// - Retrieves the user by `userId`.
    /// - Checks if the user has any associated categories.
    /// - Searches the user's categories for a category with the given `categoryId`.
    /// - If found, converts it into a `Category` model object.
    ///
    /// - Parameters:
    ///   - categoryId: The ID of the category to fetch.
    ///   - userId: The ID of the user who owns the category.
    /// - Returns: A `Category` object if found, otherwise `nil`.
    func fetchCategoryFromCoreDataWithId(categoryId: String, userId: String) -> Category? {
        print("Fetching category with id: \(categoryId)")
        
        // Create a fetch request to find the user by id
        let userRequest: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()
        // Filter the results
        userRequest.predicate = NSPredicate(format: "id == %@", userId)
        userRequest.fetchLimit = 1
        
        do {
            // Fetch the first user that matches the predicate
            if let user = try context.fetch(userRequest).first {
                // Check if the user has categories and find the category and then finds the first category whose id matches the categoryId
                if let matchedCategory = user.category?
                    .compactMap({ $0 as? CategoryEntity })
                    .first(where: { $0.id == categoryId }) {
                    
                    // Create Category object
                    let category = Category(
                        id: matchedCategory.id ?? "",
                        name: matchedCategory.name ?? "",
                        color: matchedCategory.color ?? "",
                        icon: matchedCategory.icon ?? "",
                        categoryType: CategoryType(rawValue: matchedCategory.categoryType ?? "") ?? .other,
                        budgetLimit: matchedCategory.budgetLimit
                    )
                    
                    print("✅ Found category: \(category.name ?? "")")
                    return category
                } else {
                    print("❌ Category with id \(categoryId) not found in user's categories")
                    return nil
                }
            } else {
                print("❌ User with id \(userId) not found")
                return nil
            }
        } catch {
            print("❌ Error fetching user or category: \(error)")
            return nil
        }
    }
    
    /// Updates an existing category in Core Data for a specific user.
    ///
    /// This method:
    /// - Retrieves the user using `userId`.
    /// - Searches the user's categories for a category matching the `category.id`.
    /// - Updates the matching `CategoryEntity` with the new values from the provided `Category` model.
    /// - Saves the updated data back to Core Data.
    ///
    /// - Parameters:
    ///   - category: A `Category` model containing the updated data.
    ///   - userId: The ID of the user who owns the category.
    func saveEditedCategory(category: Category, userId: String) {
        // Create a fetch request to find the user by id
        let userRequest: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()
        // Filter the results
        userRequest.predicate = NSPredicate(format: "id == %@", userId)
        userRequest.fetchLimit = 1
        
        do {
            // Fetch the first user that matches the predicate
            if let user = try context.fetch(userRequest).first {
                // Check if the user has categories and find the category and then finds the first category whose id matches the categoryId
                if let matchedCategory = user.category?
                    .compactMap({ $0 as? CategoryEntity })
                    .first(where: { $0.id == category.id }) {
                    
                    // Update the Core Data object
                    matchedCategory.name = category.name
                    matchedCategory.icon = category.icon
                    matchedCategory.color = category.color
                    matchedCategory.categoryType = category.categoryType?.rawValue
                    matchedCategory.budgetLimit = category.budgetLimit ?? 0.0
                    
                    // Save the context
                    PersistanceController.shared.saveContext()
                    print("✅ Category updated successfully.")
                }
            } else {
                print("No category found with id: \(category.id ?? "")")
            }
        } catch {
            print("❌ Failed to save context: \(error)")
        }
    }
}
